version: '3.8'

services:
  # Database layer
  postgres:
    image: postgres:15-alpine
    container_name: chainforge-postgres
    environment:
      POSTGRES_DB: chainforge
      POSTGRES_USER: chainforge
      POSTGRES_PASSWORD: chainforge_pass
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./deploy/postgres/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U chainforge"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - chainforge-network

  # Caching layer
  redis:
    image: redis:7-alpine
    container_name: chainforge-redis
    command: redis-server --appendonly yes --requirepass chainforge_redis_pass
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - chainforge-network

  # Metrics collection
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: chainforge-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./deploy/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - chainforge-network

  # Metrics visualization
  grafana:
    image: grafana/grafana:10.2.0
    container_name: chainforge-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: chainforge_grafana_pass
      GF_USERS_ALLOW_SIGN_UP: "false"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deploy/grafana/provisioning:/etc/grafana/provisioning
      - ./deploy/grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - chainforge-network

  # Distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:1.53
    container_name: chainforge-jaeger
    environment:
      COLLECTOR_OTLP_ENABLED: "true"
    ports:
      - "16686:16686"  # UI
      - "14268:14268"  # HTTP collector
      - "14250:14250"  # gRPC collector
      - "6831:6831/udp"  # UDP collector
      - "6832:6832/udp"  # UDP collector
    networks:
      - chainforge-network

  # C++ Chain Node (will be built from source)
  chainforge-node:
    build:
      context: .
      dockerfile: deploy/docker/Dockerfile.node
      target: runtime
    container_name: chainforge-node
    environment:
      NODE_ENV: development
      LOG_LEVEL: debug
      PROMETHEUS_PORT: 8080
      JAEGER_ENDPOINT: http://jaeger:14268/api/traces
    volumes:
      - node_data:/app/data
      - ./config:/app/config
    ports:
      - "8080:8080"  # Metrics
      - "8545:8545"  # JSON-RPC
      - "8546:8546"  # WebSocket
      - "30303:30303"  # P2P
      - "30303:30303/udp"  # P2P discovery
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      prometheus:
        condition: service_started
      jaeger:
        condition: service_started
    networks:
      - chainforge-network
    restart: unless-stopped

  # Blockchain Explorer (will be built from source)
  chainforge-explorer:
    build:
      context: .
      dockerfile: deploy/docker/Dockerfile.explorer
      target: runtime
    container_name: chainforge-explorer
    environment:
      EXPLORER_ENV: development
      LOG_LEVEL: debug
      REDIS_URL: redis://:chainforge_redis_pass@redis:6379
      POSTGRES_URL: postgresql://chainforge:chainforge_pass@postgres:5432/chainforge
      PROMETHEUS_PORT: 8081
    volumes:
      - ./config:/app/config
    ports:
      - "8081:8081"  # Metrics
      - "4000:4000"  # API
      - "4001:4001"  # WebSocket
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      chainforge-node:
        condition: service_started
    networks:
      - chainforge-network
    restart: unless-stopped

  # Development tools
  chainforge-tools:
    build:
      context: .
      dockerfile: deploy/docker/Dockerfile.tools
      target: runtime
    container_name: chainforge-tools
    volumes:
      - ./tools:/app/tools
      - ./config:/app/config
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - chainforge-network
    profiles:
      - tools

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  node_data:
    driver: local

networks:
  chainforge-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
